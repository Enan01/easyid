// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/id.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserId struct {
	UserId               uint64   `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserId) Reset()         { *m = UserId{} }
func (m *UserId) String() string { return proto.CompactTextString(m) }
func (*UserId) ProtoMessage()    {}
func (*UserId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d03aadcbecca2a71, []int{0}
}

func (m *UserId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserId.Unmarshal(m, b)
}
func (m *UserId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserId.Marshal(b, m, deterministic)
}
func (m *UserId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserId.Merge(m, src)
}
func (m *UserId) XXX_Size() int {
	return xxx_messageInfo_UserId.Size(m)
}
func (m *UserId) XXX_DiscardUnknown() {
	xxx_messageInfo_UserId.DiscardUnknown(m)
}

var xxx_messageInfo_UserId proto.InternalMessageInfo

func (m *UserId) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type ID struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_d03aadcbecca2a71, []int{1}
}

func (m *ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ID.Unmarshal(m, b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ID.Marshal(b, m, deterministic)
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return xxx_messageInfo_ID.Size(m)
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*UserId)(nil), "api.UserId")
	proto.RegisterType((*ID)(nil), "api.ID")
}

func init() { proto.RegisterFile("api/id.proto", fileDescriptor_d03aadcbecca2a71) }

var fileDescriptor_d03aadcbecca2a71 = []byte{
	// 138 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2c, 0xc8, 0xd4,
	0xcf, 0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x52, 0xe0,
	0x62, 0x0b, 0x2d, 0x4e, 0x2d, 0xf2, 0x4c, 0x11, 0x12, 0xe3, 0x62, 0x2b, 0x05, 0xb3, 0x24, 0x18,
	0x15, 0x18, 0x35, 0x58, 0x82, 0xa0, 0x3c, 0x25, 0x11, 0x2e, 0x26, 0x4f, 0x17, 0x21, 0x3e, 0x2e,
	0xa6, 0x4c, 0x98, 0x0c, 0x53, 0x66, 0x8a, 0x91, 0x2e, 0x17, 0xb7, 0x67, 0x8a, 0x7b, 0x6a, 0x5e,
	0x6a, 0x51, 0x62, 0x49, 0x7e, 0x91, 0x90, 0x1c, 0x17, 0x8b, 0x5f, 0x6a, 0x45, 0x89, 0x10, 0xb7,
	0x5e, 0x62, 0x41, 0xa6, 0x1e, 0xc4, 0x44, 0x29, 0x76, 0x30, 0xc7, 0xd3, 0x45, 0x89, 0xc1, 0x89,
	0x3d, 0x8a, 0x55, 0x4f, 0x3f, 0xb1, 0x20, 0x33, 0x89, 0x0d, 0x6c, 0xb7, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x17, 0x34, 0x76, 0x39, 0x8b, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IdGeneratorClient is the client API for IdGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdGeneratorClient interface {
	Next(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*ID, error)
}

type idGeneratorClient struct {
	cc *grpc.ClientConn
}

func NewIdGeneratorClient(cc *grpc.ClientConn) IdGeneratorClient {
	return &idGeneratorClient{cc}
}

func (c *idGeneratorClient) Next(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/api.IdGenerator/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdGeneratorServer is the server API for IdGenerator service.
type IdGeneratorServer interface {
	Next(context.Context, *UserId) (*ID, error)
}

// UnimplementedIdGeneratorServer can be embedded to have forward compatible implementations.
type UnimplementedIdGeneratorServer struct {
}

func (*UnimplementedIdGeneratorServer) Next(ctx context.Context, req *UserId) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}

func RegisterIdGeneratorServer(s *grpc.Server, srv IdGeneratorServer) {
	s.RegisterService(&_IdGenerator_serviceDesc, srv)
}

func _IdGenerator_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdGeneratorServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.IdGenerator/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdGeneratorServer).Next(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdGenerator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.IdGenerator",
	HandlerType: (*IdGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Next",
			Handler:    _IdGenerator_Next_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/id.proto",
}
